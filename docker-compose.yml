version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: django_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env

  redis:
    image: redis:7-alpine
    container_name: django_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_celery
    command: celery -A config worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME" ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    env_file:
      - .env

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_celery_beat
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_flower
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    environment:
      FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH:-admin:admin}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: django_uptime_kuma
    volumes:
      - uptime-kuma-data:/app/data
    ports:
      - "3001:3001"
    restart: unless-stopped
    depends_on:
      - app
      - celery
      - redis
      - db
      - flower
    networks:
      - default

volumes:
  postgres_data:
  redis_data:
  static_volume:
  uptime-kuma-data:
